{
  "name": "CMO Content Pipeline - Brief â†’ OpenAI Concepts",
  "active": true,
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        140,
        200
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "create",
        "databaseId": "{{ $workflow.settings.clientsDbId }}",
        "propertiesUi": {
          "propertyValues": [
            { "key": "Client_Name", "titleValue": "Sample Client" },
            { "key": "Industry", "selectValue": "General" }
          ]
        }
      },
      "id": "create-client",
      "name": "Create Client (example)",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        360,
        120
      ],
      "credentials": { "notionApi": { "id": "notion-cmo-creds", "name": "Notion CMO Integration" } }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "create",
        "databaseId": "{{ $workflow.settings.briefsDbId }}",
        "propertiesUi": {
          "propertyValues": [
            { "key": "Brief_Title", "titleValue": "New Brief" },
            { "key": "Client", "relationValue": "={{ $json.clientId }}" },
            { "key": "Objectives", "textValue": "Increase brand awareness." },
            { "key": "Target_Audience", "textValue": "Millennials" }
          ]
        }
      },
      "id": "create-brief",
      "name": "Create Brief (example)",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        360,
        240
      ],
      "credentials": { "notionApi": { "id": "notion-cmo-creds", "name": "Notion CMO Integration" } }
    },
    {
      "parameters": {
        "mode": "json",
        "jsonParameters": true,
        "options": {},
        "jsCode": "// Build prompt from Notion Brief page input\nconst page = $input.first().json;\nconst pageId = page.id;\nconst props = page.properties || {};\nfunction getRichText(property) {\n  const arr = props[property]?.rich_text || props[property]?.title || [];\n  return arr[0]?.plain_text || '';\n}\nconst briefTitle = getRichText('Brief_Title') || 'Untitled Brief';\nconst objectives = getRichText('Objectives') || 'Improve marketing metrics.';\nconst target = getRichText('Target_Audience') || 'General audience';\nconst prompt = `You are a senior CMO copywriting agent.\\nBrief: ${briefTitle}\\nObjective: ${objectives}\\nTarget audience: ${target}\\nDeliver EXACTLY a JSON array of 5 objects with keys: title, tagline, keyMessage, channels (array of 2-4 recommended channels). No prose.`;\nreturn [{ json: { briefId: pageId, prompt } }];"
      },
      "id": "build-prompt",
      "name": "Build OpenAI Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        240
      ]
    },
    {
      "parameters": {
        "operation": "chat",
        "model": "gpt-4o-mini",
        "messages": [
          {
            "role": "system",
            "content": "You are an expert CMO copywriter. Return concise JSON only."
          },
          {
            "role": "user",
            "content": "={{ $json.prompt }}"
          }
        ]
      },
      "id": "openai-generate",
      "name": "OpenAI: Generate Concepts",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 4,
      "position": [
        800,
        240
      ],
      "credentials": { "openAiApi": { "id": "openai-cmo-creds", "name": "OpenAI CMO" } }
    },
    {
      "parameters": {
        "jsCode": "// Parse JSON array of concepts and carry briefId\nlet text = $input.first().json.choices?.[0]?.message?.content || '';\nconst briefId = $items(0)[0]?.json?.briefId;\ntry {\n  text = text.replace(/^```(json)?/,'').replace(/```$/,'').trim();\n  const concepts = JSON.parse(text);\n  return concepts.map((c, idx) => ({ json: { index: idx+1, title: c.title, tagline: c.tagline, keyMessage: c.keyMessage, channels: Array.isArray(c.channels) ? c.channels.join(', ') : c.channels, briefId } }));\n} catch (e) {\n  return [{ json: { parseError: e.message, raw: text, briefId } }];\n}"
      },
      "id": "parse-concepts",
      "name": "Parse Concepts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        240
      ]
    },
    {
      "parameters": {
        "jsCode": "// Summarize results across all items from Parse Concepts\nconst items = $input.all();\nconst hasError = items.some(i => i.json.parseError);\nconst conceptsCount = items.filter(i => !i.json.parseError).length;\nconst briefId = items[0]?.json?.briefId || '';\nreturn [{ json: { hasError, conceptsCount, briefId, runAt: new Date().toISOString() } }];"
      },
      "id": "summarize-results",
      "name": "Summarize Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        420
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.hasError }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "isTrue"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "was-error",
      "name": "Was Error?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1240,
        420
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "create",
        "databaseId": "{{ $workflow.settings.n8nIntegrationsDbId }}",
        "propertiesUi": {
          "propertyValues": [
            { "key": "Integration_Name", "titleValue": "Brief Concepts Generation" },
            { "key": "Workflow_ID", "textValue": "={{ $workflow.id }}" },
            { "key": "Status", "selectValue": "Success" },
            { "key": "Last_Sync", "dateValue": "={{ $json.runAt }}" },
            { "key": "Records_Processed", "numberValue": "={{ $json.conceptsCount }}" },
            { "key": "Sync_Type", "selectValue": "Automatic" }
          ]
        }
      },
      "id": "log-success",
      "name": "Log Success Generation",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        1460,
        500
      ],
      "credentials": { "notionApi": { "id": "notion-cmo-creds", "name": "Notion CMO Integration" } }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "create",
        "databaseId": "{{ $workflow.settings.n8nIntegrationsDbId }}",
        "propertiesUi": {
          "propertyValues": [
            { "key": "Integration_Name", "titleValue": "Brief Concepts Generation" },
            { "key": "Workflow_ID", "textValue": "={{ $workflow.id }}" },
            { "key": "Status", "selectValue": "Error" },
            { "key": "Last_Sync", "dateValue": "={{ $json.runAt }}" },
            { "key": "Records_Processed", "numberValue": 0 },
            { "key": "Sync_Type", "selectValue": "Automatic" }
          ]
        }
      },
      "id": "log-error",
      "name": "Log Error Generation",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        1460,
        360
      ],
      "credentials": { "notionApi": { "id": "notion-cmo-creds", "name": "Notion CMO Integration" } }
    }
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "create",
        "databaseId": "{{ $workflow.settings.conceptsDbId }}",
        "propertiesUi": {
          "propertyValues": [
            { "key": "Concept_Title", "titleValue": "={{ $json.title }}" },
            { "key": "Tagline", "textValue": "={{ $json.tagline }}" },
            { "key": "Key_Message", "textValue": "={{ $json.keyMessage }}" },
            { "key": "Channels", "textValue": "={{ $json.channels }}" },
            { "key": "Brief", "relationValue": "={{ $json.briefId }}" }
          ]
        }
      },
      "id": "create-concepts",
      "name": "Create Concepts in Notion",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        1240,
        240
      ],
      "credentials": { "notionApi": { "id": "notion-cmo-creds", "name": "Notion CMO Integration" } }
    }
    ,
    {
      "parameters": {
        "event": "pageAddedToDatabase",
        "databaseId": "{{ $workflow.settings.briefsDbId }}"
      },
      "id": "brief-created",
      "name": "Brief Created",
      "type": "n8n-nodes-base.notionTrigger",
      "typeVersion": 1,
      "position": [
        140,
        60
      ],
      "credentials": { "notionApi": { "id": "notion-cmo-creds", "name": "Notion CMO Integration" } }
    }
  ],
  "connections": {
    "Manual Trigger": { "main": [[{ "node": "Create Client (example)", "type": "main", "index": 0 }, { "node": "Create Brief (example)", "type": "main", "index": 0 }]] },
    "Create Brief (example)": { "main": [[{ "node": "Build OpenAI Prompt", "type": "main", "index": 0 }]] },
    "Build OpenAI Prompt": { "main": [[{ "node": "OpenAI: Generate Concepts", "type": "main", "index": 0 }]] },
    "OpenAI: Generate Concepts": { "main": [[{ "node": "Parse Concepts", "type": "main", "index": 0 }]] },
    "Parse Concepts": { "main": [[{ "node": "Create Concepts in Notion", "type": "main", "index": 0 }, { "node": "Summarize Results", "type": "main", "index": 0 }]] },
    "Summarize Results": { "main": [[{ "node": "Was Error?", "type": "main", "index": 0 }]] },
    "Was Error?": { "main": [[{ "node": "Log Error Generation", "type": "main", "index": 0 }], [{ "node": "Log Success Generation", "type": "main", "index": 0 }]] },
    "Brief Created": { "main": [[{ "node": "Build OpenAI Prompt", "type": "main", "index": 0 }]] }
  },
  "settings": {
    "clientsDbId": "YOUR_CLIENTS_DB_ID",
    "briefsDbId": "YOUR_BRIEFS_DB_ID",
    "conceptsDbId": "YOUR_CONCEPTS_DB_ID",
    "n8nIntegrationsDbId": "YOUR_N8N_INTEGRATIONS_DATABASE_ID"
  },
  "versionId": "1",
  "id": "cmo-content-generation-workflow"
}


